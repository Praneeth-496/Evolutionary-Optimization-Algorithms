# -*- coding: utf-8 -*-
"""GA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aAlGylQlktsA-FXGTjGBtCQYjQR3AIqo
"""

!pip install ioh

from typing import Tuple
import numpy as np
# Install the ioh package via `pip install ioh`
import ioh
from ioh import get_problem, logger, ProblemClass

# Fixed budget for evaluations
budget = 5000

# Set random seed for reproducibility
np.random.seed(42)

def s4454537_s4174089_GA(problem: ioh.problem.PBO) -> None:
    """Genetic Algorithm implementation for solving optimization problems."""

    # Hyperparameters
    population_size = 200
    mutation_rate = 0.01
    crossover_rate = 0.9

    # Initialize population randomly
    population = np.random.randint(2, size=(population_size, problem.meta_data.n_variables))
    fitness = np.array([problem(ind) for ind in population])




    def tournament_selection() -> np.ndarray:
        """Perform tournament selection."""
        selected = []
        for _ in range(population_size):
            i, j = np.random.choice(population_size, 2, replace=False)
            selected.append(population[i] if fitness[i] > fitness[j] else population[j])
        return np.array(selected)

    def two_point_crossover(parents: np.ndarray) -> np.ndarray:
        """Perform two-point crossover."""
        offspring = []
        for i in range(0, population_size, 2):
            parent1, parent2 = parents[i], parents[(i + 1) % population_size]
            if np.random.rand() < crossover_rate:
                point1, point2 = sorted(np.random.choice(problem.meta_data.n_variables, 2, replace=False))
                child1 = np.concatenate((parent1[:point1], parent2[point1:point2], parent1[point2:]))
                child2 = np.concatenate((parent2[:point1], parent1[point1:point2], parent2[point2:]))
            else:
                child1, child2 = parent1, parent2
            offspring.extend([child1, child2])
        return np.array(offspring)

    def bit_flip_mutation(offspring: np.ndarray) -> np.ndarray:
        """Perform bit-flip mutation."""
        for child in offspring:
            for gene_index in range(problem.meta_data.n_variables):
                if np.random.rand() < mutation_rate:
                    child[gene_index] = 1 - child[gene_index]
        return offspring


    while problem.state.evaluations < budget:
        # Selection
        parents = tournament_selection()

        # Crossover
        offspring = two_point_crossover(parents)

        # Mutation
        offspring = bit_flip_mutation(offspring)

        # Evaluate fitness of offspring
        offspring_fitness = np.array([problem(ind) for ind in offspring])

        # Replace the worst individuals with the best offspring
        combined_population = np.vstack((population, offspring))
        combined_fitness = np.hstack((fitness, offspring_fitness))
        sorted_indices = np.argsort(combined_fitness)[-population_size:]
        population = combined_population[sorted_indices]
        fitness = combined_fitness[sorted_indices]



    # Print the best fitness value achieved in this run
    print(f"Best fitness in this run: {max(fitness):.6f}")

def create_problem(dimension: int, fid: int) -> Tuple[ioh.problem.PBO, ioh.logger.Analyzer]:
    """Create a problem instance and attach a logger."""
    problem = get_problem(fid, dimension=dimension, instance=1, problem_class=ProblemClass.PBO)
    l = logger.Analyzer(
        root="data",
        folder_name="run",
        algorithm_name="genetic_algorithm",
        algorithm_info="Practical assignment of the EA course",
    )
    problem.attach_logger(l)
    return problem, l

if __name__ == "__main__":

    print("Starting Genetic Algorithm for LABS (F18) problem...")
    F18, _logger = create_problem(dimension=50, fid=18)
    for run in range(20):
        print(f"Running iteration {run + 1}/20 for LABS (F18)...")
        s4454537_s4174089_GA(F18)
        print(f"Iteration {run + 1} completed.")
        F18.reset()  # Reset the problem state after each run
    _logger.close()  # Close the logger to save all results

    print("Finished Genetic Algorithm for LABS (F18). Results stored in 'data/run'.\n")



    print("Starting Genetic Algorithm for N-Queens (F23) problem...")
    F23, _logger = create_problem(dimension=49, fid=23)
    successes = 0
    for run in range(20):
        print(f"Running iteration {run + 1}/20 for N-Queens (F23)...")
        s4454537_s4174089_GA(F23)
        if F23.state.current_best.y >= 7:
          successes += 1
        print(f"Iteration {run + 1} completed.")
        F23.reset()
    _logger.close()
    print("Finished Genetic Algorithm for N-Queens (F23). Results stored in 'data/run'.")

!zip data.zip -r data

